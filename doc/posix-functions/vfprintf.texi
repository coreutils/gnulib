@node vfprintf
@subsection @code{vfprintf}
@findex vfprintf

POSIX specification:@* @url{https://pubs.opengroup.org/onlinepubs/9799919799/functions/vfprintf.html}

Gnulib module: vfprintf-posix or vfprintf-gnu or stdio-h, nonblocking, sigpipe
@mindex vfprintf-posix
@mindex vfprintf-gnu
@mindex stdio-h
@mindex nonblocking
@mindex sigpipe

Portability problems fixed by either Gnulib module @code{stdio-h} or @code{fprintf-posix} or @code{fprintf-gnu}:
@itemize
@item
This function does not support non-ASCII characters in double-byte encoding,
corresponding to the locale, on some platforms:
@c https://github.com/mlocati/gettext-iconv-windows/issues/52
mingw with @code{__USE_MINGW_ANSI_STDIO} in combination with msvcrt,
when the output goes to a Windows console.
@end itemize

Portability problems fixed by either Gnulib module @code{vfprintf-posix} or @code{vfprintf-gnu}:
@itemize
@item
This function does not support size specifiers as in C99 (@code{hh}, @code{ll},
@code{j}, @code{t}, @code{z}) on some platforms:
AIX 5.1, HP-UX 11.23, Solaris 9, Cygwin 1.5.24, old mingw, MSVC 9.
@item
This function does not support size specifiers as in C23 (@code{w8},
@code{w16}, @code{w32}, @code{w64}, @code{wf8}, @code{wf16}, @code{wf32},
@code{wf64}) on some platforms:
glibc 2.37, musl libc, macOS 14, FreeBSD 13.2, NetBSD 10.0, OpenBSD 7.5, AIX 7.3, Solaris 11.4, Cygwin 3.5.3, mingw, MSVC, Android 9.0.
@item
printf of @samp{long double} numbers is unsupported on some platforms:
mingw, MSVC 14.
@item
printf @code{"%f"}, @code{"%e"}, @code{"%g"} of Infinity and NaN yields an
incorrect result on some platforms:
AIX 7.3, Solaris 11.4, mingw, MSVC 14.
@item
This function doesn't support the @code{'} flag at all on some platforms:
mingw without @code{__USE_MINGW_ANSI_STDIO}, MSVC 14.
@item
This function doesn't support the @code{'} flag correctly for integers
(it uses the decimal point instead of the thousands separator!)
on some platforms:
mingw with @code{__USE_MINGW_ANSI_STDIO}.
@item
This function doesn't support the @code{'} flag together with a precision
on an integer argument correctly on some platforms:
glibc 2.36, FreeBSD 14.0, NetBSD 10.0, Solaris 11, Cygwin 3.6.0, Haiku.
@item
This function doesn't support the @code{'} flag correctly in locales where
the thousands separator is a multibyte character on some platforms:
NetBSD 10.0, Solaris 11 OpenIndiana.
@item
This function does not support the @samp{a} and @samp{A} directives on some
platforms:
FreeBSD 5.2.1, OpenBSD 4.0, AIX 5.2, HP-UX 11,
Solaris 11.4, Cygwin 1.5.x, mingw, MSVC 14.
@item
This function does not support the @samp{b} directive, required by ISO C23,
on some platforms:
glibc 2.34, musl libc, macOS 14, FreeBSD 13.2, NetBSD 10.0, OpenBSD 7.5,
AIX 7.3, HP-UX 11, Solaris 11.4, Cygwin 3.5.3, mingw, MSVC 14, Android 9.0.
@item
This function does not support the @samp{F} directive on some platforms:
NetBSD 3.0, AIX 5.1, HP-UX 11.23, Solaris 9,
Cygwin 1.5.x, mingw, MSVC 14.
@item
This function does not support the @samp{ls} directive on some platforms:
OpenBSD 4.0, Cygwin 1.5.x, Haiku.
@item
This function does not support precisions in the @samp{ls} directive correctly
on some platforms:
Solaris 11.4.
@item
This function does not support format directives that access arguments in an
arbitrary order, such as @code{"%2$s"}, on some platforms:
NetBSD 3.0, mingw, MSVC 14.
@item
This function doesn't support the @code{'} flag on some platforms:
NetBSD 3.0, Cygwin 1.5.24, mingw, MSVC 14.
@item
This function does not round the argument of the @samp{a} directive correctly
on some platforms:
macOS 14, FreeBSD 14.0, NetBSD 10.0, OpenBSD 7.5, AIX 7.3, Solaris 11.4.
@item
printf @code{"%010f"} of NaN and Infinity yields an incorrect result (padded
with zeroes, or wrong capitalization) on some platforms:
Mac OS X 10.5, FreeBSD 6.0, NetBSD 5.0, AIX 7.3, Solaris 11.4, Cygwin 1.5.x, mingw, MSVC/clang.
@item
printf @code{"%#.0x"} or @code{"%#.0X"} with a zero argument yields an
incorrect result (non-empty) on some platforms:
Mac OS X 10.6.
@item
This function does not support precisions larger than 512 or 1024 in integer,
floating-point and pointer output on some platforms:
AIX 7.1, Solaris 10/x86, mingw, MSVC/clang.
@item
This function mishandles large floating point precisions
(for example, formatting 1.0 with @samp{"%.511f"})
on some platforms:
Solaris 10.
@item
This function produces wrong output for the @samp{lc} directive with a NUL
wide character argument on some platforms:
musl libc 1.2.4.
@item
This function can crash in out-of-memory conditions on some platforms:
FreeBSD 14.0, NetBSD 5.0.
@end itemize

Portability problems fixed by Gnulib module @code{vfprintf-gnu}:
@itemize
@item
This function does not support the @samp{B} directive on some platforms:
glibc 2.34, musl libc, macOS 14, FreeBSD 13.2, NetBSD 10.0, OpenBSD 7.5, AIX 7.3, Solaris 11.4, Cygwin 3.5.3, mingw, MSVC, Android 9.0.
@end itemize

@mindex printf-with-n-directive
Portability problems fixed by either Gnulib module @code{vfprintf-posix} or @code{vfprintf-gnu}
and additionally the Gnulib module @code{printf-with-n-directive}:
@itemize
@item
This function does not support the @samp{n} directive on some platforms:
glibc when used with @code{_FORTIFY_SOURCE >= 2} (set by default on Ubuntu),
macOS 14, OpenBSD, MSVC 14, Android.
@end itemize

Portability problems fixed by Gnulib module @code{stdio-h} or @code{vfprintf-posix} or @code{vfprintf-gnu}, together with module @code{nonblocking}:
@itemize
@item
When writing to a non-blocking pipe whose buffer is full, this function fails
with @code{errno} being set to @code{ENOSPC} instead of @code{EAGAIN} on some
platforms:
mingw, MSVC 14.
@end itemize

Portability problems fixed by Gnulib module @code{stdio-h} or @code{vfprintf-posix} or @code{vfprintf-gnu}, together with module @code{sigpipe}:
@itemize
@item
When writing to a pipe with no readers, this function fails, instead of
obeying the current @code{SIGPIPE} handler, on some platforms:
mingw, MSVC 14.
@end itemize

Portability problems not fixed by Gnulib:
@itemize
@item
The @code{%m} directive is not portable, use @code{%s} mapped to an
argument of @code{strerror(errno)} (or a version of @code{strerror_r})
instead.
@item
Formatting noncanonical @samp{long double} numbers produces
nonmeaningful results on some platforms:
glibc and others, on x86, x86_64, IA-64 CPUs.
@item
When formatting an integer with grouping flag, this function inserts thousands
separators even in the "C" locale on some platforms:
NetBSD 5.1.
@item
Attempting to write to a read-only stream fails with @code{EOF} but
does not set the error flag for @code{ferror} on some platforms:
glibc 2.13, cygwin 1.7.9.
@end itemize
